TODO:
	*Add customer to database:POST
	*Search customer:GET
	*List all customers:GET
	*Place customer order:PUT
		-Check if in stock:GET
		-Update stock:PATCH
		-Create order, associate with customer via FK:PUT
	*List a customer's orders:GET
		-Search for orders with FK->Customer PK
	*List Orders:GET
	*Search Orders by orderID:GET
	*Get all of a customers orders via customerID:GET
	*View invoice for a customer:GET
		-Display orders, respective totals, and final total.
	*Delete Stock Item:DELETE
	*Delete Customer:DELETE
	*Update Stock Price: PUT
	*Restock Stock Quantity: PUT
	Make sure BRAWNDO product stock quantities are always the same: Sql trigger
~--------------------------------------------------------------------~

QUICKFIX:
	Increase maximum length of varchar fields for non-serilog attributes where necessary (name,category, etc.)
	
INCOMPLETE:
Order data:
	-Pending/Complete status
	-Order purchase date
	-Order completion date
Customer deletion:
	-Restock incomplete orders
	-Only allow customer deletes for customers with no pending orders?
Improve Logging Message readability
Tag logged exceptions
Implement status codes for:
		-Insufficient funds for order 
		-Invalid deposit amount
		-Possibly more, need to exhaustively check.

FUTURE TODO:
	Search/Filter customers by:
		-Name
		-Email
		-Corresponding Order ID(s)
	Unique and Valid Email Verification for New Customers.
	Update Customer information
	Cancel Order
		-included refund to customer
	Cancel specific Item in Order
		-with refund
	Authentication with Authorization levels
	Delivery checks for ordered items.
		-Items have a boolean for if they are delivered.
		-Once all items are delivered, the order attribute delivered = true.
			-Gotta implement the attribute and create counter table.
				~DIAGRAM IT OUT FIRST
	Stock data:
		Subcategories
	Customer data
		-Customer creation date
		-Customer login dates
		-Customer invoice pertaining to categories ordered.
		-Total amount spent per category
	
		